U4 L5

Part 1: 
class Fraction:
  # See slideshow for a full discussion of this code.
  #
  def __init__(self, num, den):
    self.__n = num
    self.__d = den

  def getNum(self):
    return self.__n

  def getDen(self):
    return self.__d

  def setNum(self, num):
    self.__n = num

  def setDen(self, den):
    self.__d = den

  def __str__(self):
    return "{0}/{1}".format(self.__n, self.__d)


class Fraction2(Fraction):
  def __init__(self, num, den):
    self.n = num
    self.d = den

    Fraction.__init__(self, num, den)

  def check(self):
    if self.getDen() == 0:
      return "yes"
    else:
      return "no"

  def mult(self, multiply):
    self.n = self.getNum()
    self.d = self.getDen()
    self.mul = multiply
    return "{0}/{1}".format(self.n * self.mul, self.d * self.mul)

  def multFrac(self, num, den):
    self.n2 = num
    self.d2 = den
    self.n = self.getNum()
    self.d = self.getDen()
    return "{0}/{1}".format(self.n * self.n2, self.d * self.d2)





# driver code
a = Fraction(6, 4)
b = Fraction(1, 2)
multiply = 2
c = Fraction2.mult(a, 2)
x = Fraction2.multFrac(a, 1, 2)
print(a)
print(b)
print(c)
print(x)
#also fixed/modified the code from previous lesson

#still part 1: 

class Fraction:
  # See slideshow for a full discussion of this code.
  #
  def __init__(self, num, den):
    self.__n = num
    self.__d = den

  def getNum(self):
    return self.__n

  def getDen(self):
    return self.__d

  def setNum(self, num):
    self.__n = num

  def setDen(self, den):
    self.__d = den

  def __str__(self):
    return "{0}/{1}".format(self.__n, self.__d)


class Fraction2(Fraction):
  def __init__(self, num, den):
    self.n = num
    self.d = den

    Fraction.__init__(self, num, den)

  def check(self):
    if self.getDen() == 0:
      return "yes"
    else:
      return "no"

  def mult(self, multiply):
    self.n = self.getNum()
    self.d = self.getDen()
    self.mul = multiply
    return "{0}/{1}".format(self.n * self.mul, self.d * self.mul)

  def multFrac(self, frac2):
    self.n2 = frac2.getNum()
    self.d2 = frac2.getDen()
    self.n = self.getNum()
    self.d = self.getDen()
    return "{0}/{1}".format(self.n * self.n2, self.d * self.d2)





# driver code
a = Fraction(6, 4)
b = Fraction(3, 2)
multiply = 2
x = Fraction2.multFrac(a, b)
print(a)
print(b)
print(x)

#but better this time :)

#Part 2: 

class Fraction:
  # See slideshow for a full discussion of this code.
  #
  def __init__(self, num, den):
    self.__n = num
    self.__d = den

  def getNum(self):
    return self.__n

  def getDen(self):
    return self.__d

  def setNum(self, num):
    self.__n = num

  def setDen(self, den):
    self.__d = den

  def __str__(self):
    return "{0}/{1}".format(self.__n, self.__d)


class Fraction2(Fraction):
  def __init__(self, num, den):
    self.n = num
    self.d = den

    Fraction.__init__(self, num, den)

  def check(self):
    if self.getDen() == 0:
      return "yes"
    else:
      return "no"

  def mult(self, multiply):
    self.n = self.getNum()
    self.d = self.getDen()
    self.mul = multiply
    return "{0}/{1}".format(self.n * self.mul, self.d * self.mul)

  def multFrac(self, frac2):
    self.n2 = frac2.getNum()
    self.d2 = frac2.getDen()
    self.n = self.getNum()
    self.d = self.getDen()
    a = self.n * self.d2
    c = self.n2 * self.d
    d = self.d2 * self.d
    return "{0}/{1}".format(a + c, d)

# driver code
a = Fraction(6, 4)
b = Fraction(2, 3)
multiply = 2
x = Fraction2.multFrac(a, b)
print(a)
print(b)
print(x)




