# for finding the distance between two points

import math
class Point:
    def __init__(self, X, Y):
        self.__x = X
        self.__y = Y
      
    def getX(self):
        return self.__x

    def getY(self):
        return self.__y

    def setX(self, X):
        self.__x = X

    def setY(self, Y):
        self.__y = Y
        

# add code to get x, y, and 
# a point (x, y) respecting encapsulation

    def distance(self, p2):
        self.x2 = p2.getX()
        self.y2 = p2.getY()
        return math.sqrt((self.__x-self.x2)**2 + (self.__y-self.y2)**2)
    

p = Point(1,2)
p2 = Point(2,3)
x = Point.distance(p, p2)
print(x)
print(Point.getX(p))




#_______________________________________________________________________________________________


class Node:
    def __init__(self, data = None):
        self.data = data
        self.next = None

class Point:
    def __init__(self, x, y):
        self.__x = x
        self.__y = y
        self.__c = (self.__x, self.__y)
        self.__head = None
        if self.__head == None:
            self.__head = Node(self.__c)
            self.__coords = self.__head.next
        else:
            self.__coords.next = Node(self.__c)
            self.__coords = self.__coords.next
    
    def getX(self):
        return self.__x

    def getY(self):
        return self.__y
    
    def getC(self):
        return self.__c
    
    def __tuple__(self):
        x = self.__head.next
        while x != None:
            print(self.getC(), "-> ")
            x = x.next
        return self.getC()
  
fh = open("Points.txt", "r")
line = fh.readline()
line = line.replace(" ", "")
line = line.replace("(", "")
line = line.replace(")", "")
line = line.split(",")
coords = []
for i in range(len(line) - 1):
    if i % 2 == 0:
        temp = []
        temp.append(int(line[i]))
        temp.append(int(line[i + 1]))
        coords.append(temp)
print(coords)

for i in range(len(coords)):
    a = Point(coords[i][0], coords[i][1])
    a = Point(coords[i][0], coords[i][1])
print(a)

#_______________________________________________________________________________________________
class point:
    def __init__(self, x: float=None, y: float=None):
        # Default is None due to creation of a Head Node for linked lists
        self.__x = x
        self.__y = y
        self.next = None
        
    def getX(self):
        return self.__x

    def getY(self):
        return self.__y

    def valid(self):
        # A validator is needed mostly for when we go to the end of the file, but
        # also to assure us that the point is properly formatted with either
        # ints or floats.
        val = False # obviously add code here
        if self.getX() == int(self.getX()):
            val = True
        elif self.getX() is float(self.getX()):
            val = True
        if self.getY() is int(self.getY()):
            val = True
        elif self.getY() is float(self.getY()):
            val = True

        return val

    def __str__(self):
        # point (x, y) expressed this way as string
        # as in: (4, 5)
        x = "{}, {}".format(self.getX(), self.getY())
        return x
        

class Polygon:
    def __init__(self):
        # Set basic properties to default values
        self.__sides = 0
        self.__vertices = 0
        self.__head = point() # a null point with a null Next field

    def add_point(self, x: float, y: float):
        # initialize a point object V
        # if it is the first point, create the object with variable V make head.next point to V
        # if it is any other point, V.next points to it, and V traverses to that point
        # count the vertices as you go
        self.v = self.__head
        if self.v == None:
            self.__head = (x, y)
            self.v.next = 
        pass

    def __str__(self):
        # Use a traversal to generate the entire set of points separated by "->" as string
        # You need to use point's __str__ function to help you.
        pass
    
def getNumeric(S : str):
    # input: S is a point in the format "(x,y)" (type str)
    # output: a tuple or list indicating a point (x, y) where x, y are int or float
    S = S.strip("()")
    [x, y] = S.split(",")
    try:
        x = int(x)
    except:
        x = float(x)
    try:
        y = int(y)
    except:
        y = float(y)
    # obiviously, change these
    return (x, y)


fh = open("a2.txt", "r") # this is the name of the data file to open
polydata = (fh.readline()).strip()
polydata = polydata.split(", ")
for i in range(len(polydata)):
    p = getNumeric(polydata[i])
    triangle = Polygon()
    p = triangle.add_point(p, p)
    print(p)
# make an array of points (str)
# declare a polygon
# loop through the points array and turn them into numbers for the polynomial object
    # generate an x, y pair (numerical not str) from getNumeric
    # add to the polynomial (call add_point())

#print(Poly) # this should print the entire linked list of points as string


















